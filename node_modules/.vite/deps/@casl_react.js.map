{
  "version": 3,
  "sources": ["../../@casl/react/src/Can.ts", "../../@casl/react/src/factory.ts", "../../@casl/react/src/hooks/useAbility.ts"],
  "sourcesContent": ["import { PureComponent, ReactNode } from 'react';\nimport {\n  Unsubscribe,\n  AbilityTuple,\n  SubjectType,\n  AnyAbility,\n  Generics,\n  Abilities,\n  IfString,\n} from '@casl/ability';\n\nconst noop = () => {};\n\ntype AbilityCanProps<\n  T extends Abilities,\n  Else = IfString<T, { do: T } | { I: T }>\n> = T extends AbilityTuple\n  ? { do: T[0], on: T[1], field?: string } |\n  { I: T[0], a: Extract<T[1], SubjectType>, field?: string } |\n  { I: T[0], an: Extract<T[1], SubjectType>, field?: string } |\n  { I: T[0], this: Exclude<T[1], SubjectType>, field?: string }\n  : Else;\n\ninterface ExtraProps {\n  not?: boolean\n  passThrough?: boolean\n}\n\ninterface CanExtraProps<T extends AnyAbility> extends ExtraProps {\n  ability: T\n  children: ReactNode | ((isAllowed: boolean, ability: T) => ReactNode)\n}\n\ninterface BoundCanExtraProps<T extends AnyAbility> extends ExtraProps {\n  ability?: T\n  children: ReactNode | ((isAllowed: boolean, ability: T) => ReactNode)\n}\n\nexport type CanProps<T extends AnyAbility> =\n  AbilityCanProps<Generics<T>['abilities']> & CanExtraProps<T>;\nexport type BoundCanProps<T extends AnyAbility> =\n  AbilityCanProps<Generics<T>['abilities']> & BoundCanExtraProps<T>;\n\nexport class Can<\n  T extends AnyAbility,\n  IsBound extends boolean = false\n> extends PureComponent<IsBound extends true ? BoundCanProps<T> : CanProps<T>> {\n  private _isAllowed: boolean = false;\n  private _ability: T | null = null;\n  private _unsubscribeFromAbility: Unsubscribe = noop;\n\n  componentWillUnmount() {\n    this._unsubscribeFromAbility();\n  }\n\n  private _connectToAbility(ability?: T) {\n    if (ability === this._ability) {\n      return;\n    }\n\n    this._unsubscribeFromAbility();\n    this._ability = null;\n\n    if (ability) {\n      this._ability = ability;\n      this._unsubscribeFromAbility = ability.on('updated', () => this.forceUpdate());\n    }\n  }\n\n  get allowed() {\n    return this._isAllowed;\n  }\n\n  private _canRender(): boolean {\n    const props: any = this.props;\n    const subject = props.of || props.a || props.an || props.this || props.on;\n    const can = props.not ? 'cannot' : 'can';\n\n    return props.ability[can](props.I || props.do, subject, props.field);\n  }\n\n  render() {\n    this._connectToAbility(this.props.ability);\n    this._isAllowed = this._canRender();\n    return this.props.passThrough || this._isAllowed ? this._renderChildren() : null;\n  }\n\n  private _renderChildren() {\n    const { children, ability } = this.props;\n    const elements = typeof children === 'function'\n      ? children(this._isAllowed, ability as any)\n      : children;\n\n    return elements as ReactNode;\n  }\n}\n", "import { createElement as h, ComponentClass, Consumer, FunctionComponent } from 'react';\nimport { AnyAbility } from '@casl/ability';\nimport { Can, BoundCanProps } from './Can';\n\ninterface BoundCanClass<T extends AnyAbility> extends ComponentClass<BoundCanProps<T>> {\n  new (props: BoundCanProps<T>, context?: any): Can<T, true>\n}\n\nexport function createCanBoundTo<T extends AnyAbility>(ability: T): BoundCanClass<T> {\n  return class extends Can<T, true> {\n    static defaultProps = { ability } as BoundCanClass<T>['defaultProps'];\n  };\n}\n\nexport function createContextualCan<T extends AnyAbility>(\n  Getter: Consumer<T>\n): FunctionComponent<BoundCanProps<T>> {\n  return (props: BoundCanProps<T>) => h(Getter, {\n    children: (ability: T) => h(Can, {\n      ability,\n      ...props,\n    } as any)\n  });\n}\n", "import React from 'react';\nimport { AnyAbility } from '@casl/ability';\n\nexport function useAbility<T extends AnyAbility>(context: React.Context<T>): T {\n  if (process.env.NODE_ENV !== 'production' && typeof React.useContext !== 'function') {\n    /* istanbul ignore next */\n    throw new Error('You must use React >= 16.8 in order to use useAbility()');\n  }\n\n  const ability = React.useContext<T>(context);\n  const [rules, setRules] = React.useState<T['rules']>();\n\n  React.useEffect(() => ability.on('updated', (event) => {\n    if (event.rules !== rules) {\n      setRules(event.rules);\n    }\n  }), []);\n\n  return ability;\n}\n"],
  "mappings": ";;;;;;;;;;;;;AAWA,IAAMA,IAAOA,MAAAA;AAAAA;AAgCN,IAAMC,IAAN,cAGGC,aAAAA,cAAAA;EAAqEC,eAAAC,IAAAA;AAAAC,UAAAA,GAAAD,EAAAA;AAAAE,SACrEC,IAAsB;AAAKD,SAC3BE,IAAqB;AAAIF,SACzBG,IAAuCT;EAAI;EAEnDU,uBAAAA;AACEJ,SAAKG,EAAAA;EACP;EAEQE,EAAkBC,IAAAA;AACxB,QAAIA,OAAYN,KAAKE,EACnB;AAGFF,SAAKG,EAAAA;AACLH,SAAKE,IAAW;AAEhB,QAAII,IAAS;AACXN,WAAKE,IAAWI;AAChBN,WAAKG,IAA0BG,GAAQC,GAAG,WAAW,MAAMP,KAAKQ,YAAAA,CAAAA;IAClE;EACF;EAEA,IAAA,UAAIC;AACF,WAAOT,KAAKC;EACd;EAEQS,IAAAA;AACN,UAAMC,KAAaX,KAAKW;AACxB,UAAMC,KAAUD,GAAME,MAAMF,GAAMG,KAAKH,GAAMI,MAAMJ,GAAMX,QAAQW,GAAMJ;AACvE,UAAMS,KAAML,GAAMM,MAAM,WAAW;AAEnC,WAAON,GAAML,QAAQU,EAAAA,EAAKL,GAAMO,KAAKP,GAAMQ,IAAIP,IAASD,GAAMS,KAAAA;EAChE;EAEAC,SAAAA;AACErB,SAAKK,EAAkBL,KAAKW,MAAML,OAAAA;AAClCN,SAAKC,IAAaD,KAAKU,EAAAA;AACvB,WAAOV,KAAKW,MAAMW,eAAetB,KAAKC,IAAaD,KAAKuB,EAAAA,IAAoB;EAC9E;EAEQA,IAAAA;AACN,UAAA,EAAMC,UAAEA,IAAQlB,SAAEA,GAAAA,IAAYN,KAAKW;AACnC,UAAMc,KAAAA,OAAkBD,OAAa,aACjCA,GAASxB,KAAKC,GAAYK,EAAAA,IAC1BkB;AAEJ,WAAOC;EACT;AAAA;ACtFK,SAASC,EAAuCpB,IAAAA;AAA8B,MAAAqB;AACnF,SAAAA,KAAO,cAAchC,EAAAA;EAAAA,GAEpBgC,GADQC,eAAe,EAAEtB,SAAAA,GAAAA,GAASqB;AAErC;AAEO,SAASE,EACdC,IAAAA;AAEA,SAAQnB,CAAAA,WAA4BoB,aAAAA,eAAED,IAAQ,EAC5CN,UAAWlB,CAAAA,WAAeyB,aAAAA,eAAEpC,GAAGqC,OAAAC,OAAA,EAC7B3B,SAAAA,GAAAA,GACGK,EAAAA,CAAAA,EAAAA,CAAAA;AAGT;ACpBO,SAASuB,WAAiCC,IAAAA;AAC/C,MAA6B,OAAuBC,aAAAA,QAAMC,eAAe,WAEvE,OAAM,IAAIC,MAAM,yDAAA;AAGlB,QAAMhC,KAAU8B,aAAAA,QAAMC,WAAcF,EAAAA;AACpC,QAAA,CAAOI,IAAOC,EAAAA,IAAYJ,aAAAA,QAAMK,SAAAA;AAEhCL,eAAAA,QAAMM,UAAU,MAAMpC,GAAQC,GAAG,WAAYoC,CAAAA,OAAAA;AAC3C,QAAIA,GAAMJ,UAAUA,GAClBC,CAAAA,GAASG,GAAMJ,KAAAA;EACjB,CAAA,GACE,CAAA,CAAA;AAEJ,SAAOjC;AACT;",
  "names": ["noop", "Can", "PureComponent", "constructor", "args", "super", "this", "_isAllowed", "_ability", "_unsubscribeFromAbility", "componentWillUnmount", "_connectToAbility", "ability", "on", "forceUpdate", "allowed", "_canRender", "props", "subject", "of", "a", "an", "can", "not", "I", "do", "field", "render", "passThrough", "_renderChildren", "children", "elements", "createCanBoundTo", "_Class", "defaultProps", "createContextualCan", "Getter", "h", "Object", "assign", "useAbility", "context", "React", "useContext", "Error", "rules", "setRules", "useState", "useEffect", "event"]
}
